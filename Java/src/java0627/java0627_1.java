package java0627;

public class java0627_1 {

	public static void main(String[] args) {
		
		// 연산자
		
		// 정수와 정수를 연산하면 결과는 정수
		// 정수와 실수를 연산하면 결과는 실수
		
		
		// 산술연산자 - , + , * , /(몫) , %(나머지)
		
			System.out.println( 10 / 4 ); // 정수와 정수
			System.out.println( 10 / 4.0 ); // 정수와 실수
			System.out.println( 10 / (float)4 ); //정수와 실수(강제형변환)
		
		// 증감연산자 ++ , --
		
		// 대입연산자 =
		
		// 복합대입연산자 += , -= , *= , /= , %= 
			int a = 10;
			a += 3; // a = a + 3; 변수에 값을 더해 변수값에 저장 저장되는 변수와 계산되는 변수가 같아야 사용가능
		
		// 비교연산자 > , < , >= , <= , == , !=
		// java에서 비교연산자는 숫자에만 사용가능
			String name1 = "이순신";
			String name2 =  "김유신";
			System.out.println( name1.equals(name2) );
			// 문자열은 문자열.equals(문자열) 로 비교
		
		// 논리연산자 && , || , !
			
		// 조건연산자 (조건식) ? 참내용 : 거짓내용 ;
		
		// 비트연산자
		
			// 비트논리연산자 & , | , ~ , ^
				System.out.println( 34 & 15 );
				// 결과값은 10진수 2
				// 100010 34
				// 001111 15
				// 000010 2
				// 두 값의 2진수값을 비교해서 값을 도출함 
				
				System.out.println( 42 | 21 );
				// 101010 42
				// 010101 21
				// 111111 63 
				
				System.out.println( 42 ^ 30 );
				// 010101 42
				// 011110 30
				// 010100 20
				
				// 101010 42
				// 100001 30
				// 100000 32
				
				// 110100 52
				
				System.out.println( ~13 );
				// [0] 1101 13 > ~ 연산은 2진수의 숫자의 각 자리수에 1의 보수를 취해 나오는 값이다. 이 값에 1을 더해주면 2의 보수를 구한것과 같다.
				// 보수의 경우 + , - 연산의 값이 같이 적용가능함 
				// ex) 4의 n의 보수 x의 -> 4의 (n+1)의 보수 (x+1) 
				// [1] 0010 -14
				// 즉 1101의 2진법에 1의 보수를 취한값에 1을 더하면 2의 보수를 구한것이다.???
				// 보수 -> 부족한수가 얼마인가 
				// [1] == -1 이 결론인데 과정을 모르겠다.
				// 0의 값이 +0 , -0 으로 나뉘면 -0으로 계산이 애매함 -> -0을 없애고 -1부터 시작하자해서 음수의 시작값을 -1로 시작하는게 아닌가 싶은데
				
				
				
			// 비트시프트연산자 >> , << 
				// << - 왼쪽으로 몇칸씩 이동해라( 뒤에 0을 붙여주면 매우 간단? )
				// 이동한 빈칸에 양수면 0을 음수면 1을 넣어준다. 
				System.out.println( 5 << 2 );
				// 000101 5 
				// 010100 20
				
				System.out.println( -5 << 2);
				// [1] 111010
				// [1] 101011 -20
				
				System.out.println( 1 << 7 );
				// 2의 n승을 구할때 사용
				
				// >> - 오른쪽으로 몇칸씩 이동해라 ( 2^0 즉 1의 자리를 벗어나면 사라진다.)
				
				System.out.println( 16 >> 4 );
				// 0010000 16
				// 0000001 1
				
				// 0011111 31
				// 0000001 1
				// 1의 자리보다 오른쪽으로 이동할 경우 사라진다.
				
				
				System.out.println( -5 >> 2 );
				// [1] 1111010
				// [1] 1111110 -1
				
				
				System.out.println( 1024 >> 3 );
				// 값을 2의n승으로 나눌때 사용 
				
				
		int red =188;
		int green = 229;
		int blue = 92;
		int color = ( red << 16 ) | ( green << 8 ) | blue;
		// rbg값을 16진수로 표현하기 위해 자리수를 이동해줌
		System.out.printf( "#%06X \n" , color );
		// %x로 10진수의 값을 넣어주면 16진수로 자동변환되어 출력
		// %o로 10진수의 값을 넣어주면 8진수로 자동변환되어 출력
			
	}

}